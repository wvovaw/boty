import {
  Menu,
  MenuRange,
} from "https://deno.land/x/grammy_menu@v1.1.2/menu.ts";

import { MyContext } from "./../types.ts";
import { mainMenuEntries } from "./mainMenuEntries.ts";
import { infoMenuEntries } from "./infoMenuEntries.ts";
import { buyMenuEntries } from "./buyMenuEntries.ts";
import { writePaymentData, getFreeKeyRow } from "../../googlesheet/sheet.ts";

/**
 * Main menu
 */
export const mainMenuText = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RussianVPN! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å!</b>

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ VPN - –Ω–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å VPN".

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å –æ VPN.`;

export const mainMenu = new Menu<MyContext>("Main");
mainMenu.dynamic(() => {
  const range = new MenuRange<MyContext>();
  for (const item of mainMenuEntries) {
    range
      .submenu(
        { text: item.title, payload: item.id }, // label and payload
        item.id, // Target menu
        (ctx) =>
          ctx.editMessageText(item.text, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }) // Handler
      )
      .row();
  }
  return range;
});

/**
 * Buy submenu
 */
const buyMenu = new Menu<MyContext>("Buy");
buyMenu.dynamic(() => {
  const range = new MenuRange<MyContext>();
  for (const item of buyMenuEntries) {
    range
      .submenu(
        { text: item.title, payload: item.id }, // label and payload
        "Payment", // Target menu
        (ctx) => {
          ctx.session.storage.itemId = item.id;
          ctx.session.storage.paymentText = item.text;
          ctx.editMessageText(item.text, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }); // Handler
        }
      )
      .row();
  }
  range.back({ text: "üîô –ì–ª–∞–≤–Ω–∞—è" }, (ctx) =>
    ctx.editMessageText(mainMenuText, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    })
  );
  return range;
});
/**
 * Payment submenu
 */
const paymentMenu = new Menu<MyContext>("Payment");
paymentMenu.dynamic((ctx) => {
  const range = new MenuRange<MyContext>();
  range
    .text("–û–ø–ª–∞—Ç–∏—Ç—å", async (ctx) => {
      if (
        ctx.session.storage.paymentStatus != true &&
        ctx.session.storage.paymentStatus != undefined
      ) {
        const messageText = `<b>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n${ctx.session.storage.paymentUrl}`;
        if (
          // BUG: Preventing a bug which crush an app if replacing message with the same text
          ctx.msg?.text !=
          messageText.replaceAll("<b>", "").replaceAll("</b>", "")
        )
          ctx.editMessageText(messageText, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          });
        return;
      }
      // Else: generate new invoice url, save it in session storage

      const { index, amount, trafic, city, key } = await getFreeKeyRow(
        ctx.session.storage.itemId
      );
      if (index == undefined) {
        ctx.reply(
          `<b>–û—à–∏–±–∫–∞</b>

–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –∫–ª—é—á–µ–π –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
          { parse_mode: "HTML" }
        );
        return;
      }
      ctx.session.storage.paymentStatus = false;
      ctx.session.storage.paymentUrl =
        "https://oplata.qiwi.com/form/?invoice_uid=aa0fa2bb-5452-47ca-9190-cd9c1a73718f";
      setTimeout(() => {
        // setUserIDInRow(String(ctx.from.id), 11);
        // TODO: create a task which will check  a payment status on qiwi side
        ctx.session.storage.paymentStatus = true;
        writePaymentData(ctx.from?.id, index, new Date(), amount);
        ctx.reply(
          `<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>

–ì–æ—Ä–æ–¥: ${city}
–¢—Ä–∞—Ñ–∏–∫: ${trafic} –ì–±
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${amount} —Ä—É–±.

–í–∞—à –∫–ª—é—á: ${key}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.`,
          { parse_mode: "HTML" }
        );
        console.log("Transaction has been approved!");
      }, 10000);
      const messageText =
        ctx.session.storage.paymentText +
        `

<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> ${ctx.session.storage.paymentUrl}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>. –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á.`;
      ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });
    })
    .text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", () => {
      const messageText =
        ctx.session.storage.paymentText +
        `

<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> https://oplata.qiwi.com/form/?invoice_uid=aa0fa2bb-5452-47ca-9190-cd9c1a73718f

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>. –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á.

–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: <b>${
          ctx.session.storage.paymentStatus ? "" : "–ù–ï "
        }–û–ü–õ–ê–ß–ï–ù–û</b>`;

      if (
        // BUG: Preventing a bug which crush an app if replacing message with the same text
        ctx.msg?.text !=
        messageText.replaceAll("<b>", "").replaceAll("</b>", "")
      )
        ctx.editMessageText(messageText, {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        });
    })
    .row();
  range.back({ text: "üîô –ù–∞–∑–∞–¥" }, (ctx) =>
    ctx.editMessageText(mainMenuEntries[0].text, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    })
  );
  return range;
});

/**
 * Info submenu
 */
const infoMenu = new Menu<MyContext>("Info");
infoMenu.dynamic(() => {
  const range = new MenuRange<MyContext>();
  for (const [ix, item] of infoMenuEntries.entries()) {
    range
      .submenu(
        { text: item.title, payload: String(ix) }, // label and payload
        "Pagination", // Target menu
        (ctx) =>
          ctx.editMessageText(item.text, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }) // Handler
      )
      .row();
  }
  range.back({ text: "üîô –ì–ª–∞–≤–Ω–∞—è" }, (ctx) =>
    ctx.editMessageText(mainMenuText, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    })
  );
  return range;
});

/**
 *  Info text view
 */
const infoTextView = new Menu<MyContext>("Pagination");
infoTextView.dynamic(() => {
  const range = new MenuRange<MyContext>();
  range.back({ text: "üîô –ù–∞–∑–∞–¥" }, (ctx) =>
    ctx.editMessageText(mainMenuEntries[1].text, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    })
  );
  return range;
});

/**
 *  Support view
 */

const supportView = new Menu<MyContext>("Support");
supportView.dynamic(async (ctx) => {
  await ctx.conversation.enter("help");
});

mainMenu.register(infoMenu);
mainMenu.register(buyMenu);
mainMenu.register(supportView);
buyMenu.register(paymentMenu);
infoMenu.register(infoTextView);
